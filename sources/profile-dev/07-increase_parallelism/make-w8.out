pgc++ -O0 -ta=tesla,lineinfo -Minfo=all -Mneginfo main.cpp -o cg.x
allocate_vector(vector &, unsigned int):
     20, include "vector.h"
          29, Accelerator clause: upper bound for dimension 0 of array 'v' is unknown
              Generating enter data create(v[:1],v->coefs[:n])
free_vector(vector &):
     20, include "vector.h"
          34, Generating exit data delete(v[:1],v->coefs[:1])
initialize_vector(vector &, double):
     20, include "vector.h"
          43, Generating update device(v->coefs[:v->n])
dot(const vector &, const vector &):
     21, include "vector_functions.h"
          25, Generating implicit copyin(xcoefs[:n],ycoefs[:n]) [if not already present]
          28, Loop is parallelizable
              Generating Tesla code
              28, #pragma acc loop gang, vector(128) /* blockIdx.x threadIdx.x */
              29, Generating implicit reduction(+:sum)
waxpby(double, const vector &, double, const vector &, const vector &):
     21, include "vector_functions.h"
          41, Generating copyin(xcoefs[:x->n]) [if not already present]
              Generating copy(ycoefs[:y->n],wcoefs[:w->n]) [if not already present]
          43, Loop is parallelizable
              Generating Tesla code
              43, #pragma acc loop gang, vector(128) /* blockIdx.x threadIdx.x */
allocate_3d_poisson_matrix(matrix &, int):
     22, include "matrix.h"
          73, Accelerator clause: upper bound for dimension 0 of array 'A' is unknown
              Generating enter data copyin(A[:1],A->row_offsets[:num_rows+1],A->coefs[:nnz],A->cols[:nnz])
free_matrix(matrix &):
     22, include "matrix.h"
          82, Generating exit data delete(A->coefs[:1],A->cols[:1],A[:1],A->row_offsets[:1])
matvec(const matrix &, const vector &, const vector &):
     23, include "matrix_functions.h"
          27, Generating copyin(Acoefs[:A->nnz]) [if not already present]
              Generating implicit copyin(row_offsets[:num_rows+1]) [if not already present]
              Generating copyin(cols[:A->nnz]) [if not already present]
              Generating implicit copyout(ycoefs[:num_rows]) [if not already present]
              Generating copyin(xcoefs[:x->n]) [if not already present]
          31, Loop is parallelizable
              Generating Tesla code
              31, #pragma acc loop gang, worker(8) /* blockIdx.x threadIdx.y */
              36, #pragma acc loop vector(32) /* threadIdx.x */
                  Vector barrier inserted to share data across vector lanes
              40, Generating implicit reduction(+:sum)
              41, Vector barrier inserted for vector loop reduction
                  Vector barrier inserted due to potential dependence out of a vector loop
              44, Vector barrier inserted due to potential dependence into a vector loop
          36, Loop is parallelizable
